{"version":3,"file":"client.js","sourceRoot":"","sources":["../client.ts"],"names":[],"mappings":"AAAA,kBAAkB;AAgElB,MAAM,OAAO,MAAM;IACV,OAAO,CAAM;IACb,OAAO,GAAY,IAAI,OAAO,EAAE,CAAC;IAEzC,YAAY,OAAe;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,YAAY,CAAC,IAAY,EAAE,IAAY;QACtC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,YAAY,CAAC,KAAa;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,SAAS;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAEO,KAAK,CAAC,KAAK,CAAC,IAAY;QAC/B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAExC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE;YAC5B,OAAO,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SACnC;QAED,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;CACD;AAED,MAAM,OAAO,KAAK;IACjB,QAAQ,CAAW;IAEnB,YAAY,IAAe;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC;IACpC,CAAC;CACD","sourcesContent":["// Sol√∏ API client\n\nexport interface DebugInfo {\n\tserver?: ServerInfo | null;\n\tip?:     IPInfo | null;\n\thttp?:   HTTPInfo | null;\n\ttls?:    TLSInfo | null;\n}\n\nexport interface JSONError {\n\tmessages:  string[];\n}\n\nexport interface Task {\n\tid:          string;\n\tetag:        string;\n\tgeneration:  number;\n\tuserID?:     string | null;\n\tname?:       string | null;\n\tcomplete?:   boolean | null;\n\tafter?:      string | null;\n}\n\nexport interface Token {\n\tid:          string;\n\tetag:        string;\n\tgeneration:  number;\n\tuserID?:     string | null;\n\ttoken?:      string | null;\n}\n\nexport interface User {\n\tid:            string;\n\tetag:          string;\n\tgeneration:    number;\n\tname?:         string | null;\n\temail?:        string | null;\n\tpassword?:     string | null;\n\tserviceAdmin?: boolean | null;\n}\n\nexport interface ServerInfo {\n\thostname:  string;\n}\n\nexport interface IPInfo {\n\tremoteAddr:  string;\n}\n\nexport interface HTTPInfo {\n\tprotocol:  string;\n\tmethod:    string;\n\theader:    string;\n\turl:       string;\n}\n\nexport interface TLSInfo {\n\tversion:             number;\n\tdidResume:           boolean;\n\tcipherSuite:         number;\n\tnegotiatedProtocol:  string;\n\tserverName:          string;\n}\n\nexport class Client {\n\tprivate baseURL: URL;\n\tprivate headers: Headers = new Headers();\n\n\tconstructor(baseURL: string) {\n\t\tthis.baseURL = new URL(baseURL);\n\t}\n\n\tsetBasicAuth(user: string, pass: string) {\n\t\tconst enc = btoa(`${user}:${pass}`);\n\t\tthis.headers.set('Authorization', `Basic ${enc}`);\n\t}\n\n\tsetAuthToken(token: string) {\n\t\tthis.headers.set('Authorization', `Bearer ${token}`);\n\t}\n\n\tasync debugInfo(): Promise<DebugInfo> {\n\t\treturn this.fetch('_debug');\n\t}\n\n\tprivate async fetch(path: string): Promise<any> {\n\t\tconst url = new URL(path, this.baseURL);\n\n\t\tconst req = new Request(url, {\n\t\t\theaders: this.headers,\n\t\t});\n\n\t\tconst resp = await fetch(req);\n\t\tif (!resp.ok) {\n\t\t\tthrow new Error(await resp.json());\n\t\t}\n\n\t\treturn resp.json();\n\t}\n}\n\nexport class Error {\n\tmessages: string[];\n\n\tconstructor(json: JSONError) {\n\t\tthis.messages = json.messages;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messages[0] ?? 'error';\n\t}\n}\n"]}